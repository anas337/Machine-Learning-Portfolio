import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Learning agent parameters:
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        
        # Additional class parameters could be added here:

    
    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        # Updating epsilon using a decay function 
        # If 'testing' is True, set epsilon and alpha to 0
        if testing:
            self.epsilon=0
            self.alpha=0
        else:
            if self.learning:
                # Default learning
                #self.epsilon= self.epsilon-0.05
                
                # Improved learning(0.002 = 1/500 to have 500 trials)
                self.epsilon= self.epsilon- 0.002
        # Updating additional class parameters         
        

                
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        # Setting 'state' tuple of relevant data for the agent        
        
        state= (inputs['light'], waypoint, inputs['oncoming'], inputs['left'])
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        
        # Calculating the maximum Q-value of all actions for a given state     
        maxQ = max(list(self.Q[state].values()))

        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """


        # When learning, we check if the 'state' is not in the Q-table
        # If it is not, we create a new dictionary for that state
        #   Then, for each action available, we set the initial Q-value to 0.0
        if self.learning:
            if not(state in self.Q):
                
                # For each action in that state we set the intial Q-value to 0.0
                actions={None:0.0,'forward':0.0,'left':0.0,'right':0.0}
                
                # Creating a new dictionnary for that state
                self.Q[state]=actions 
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action=None
        
        
        # When the agent is not learning, we choose a random action
        if not(self.learning): #When not Learing
            action = random.choice(self.valid_actions) #choose a random action
            
        
        else:  # When learning   
            # We choose a random action with 'epsilon' probability
            random_variable=random.random()
            if random_variable<= self.epsilon:
                action=random.choice(self.valid_actions)
            
            else: # Otherwise
                max_Q= self.get_maxQ(state)
                # We choose an action with the highest Q-value from the current state
                action_list=[]
                for action in self.Q[state].keys():
                    if self.Q[state][action]==max_Q:
                        action_list= action_list+[action]
                # when choosing an action with highest we randomly select between actions that "tie".
                action=random.choice(action_list)
        
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """


        # When learning, we implement the value iteration update rule
        if self.learning:
            self.Q[state][action]= self.Q[state][action] + (self.alpha*(reward-self.Q[state][action]))
            
        return 


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation, default is False
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
     
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning default is False
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent,learning=True,alpha=0.5)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric, default is False
    env.set_primary_agent(agent,enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled default is True
    #   log_metrics  - set to True to log trial and simulation results to /logs default is False
    #   optimized    - set to True to change the default log file name, default is False
    sim = Simulator(env,update_delay=0.02,log_metrics=True,display=True,optimized=True)
    
    ##############
    # Run the simulator 
    # Flags:  
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=500,tolerance=0.002)


if __name__ == '__main__':
    run()
